{"version":3,"sources":["app/course_search.cljc"],"mappings":";AAWA,AACA,AAEA","names":[],"sourcesContent":["(ns app.course-search\n  (:require clojure.edn\n            contrib.ednish\n            [contrib.datomic-m #?(:clj :as :cljs :as-alias) d]\n            [hyperfiddle.electric :as e]\n            [hyperfiddle.electric-dom2 :as dom]\n            [hyperfiddle.electric-ui4 :as ui4]\n            [hyperfiddle.history :as history]\n            #?(:clj [datomic.client.api :as dt])))\n\n\n(e/def conn)\n(e/def db)\n\n(e/defn CourseSearch []\n        (e/server\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\n            (binding [db (dt/db conn)]\n             (e/client\n               (dom/div\n                 (let [!filter-course (atom \"\"), filter-course (e/watch !filter-course)]\n                    (dom/span  (dom/text \"Course Search by Name:\"))\n                    (ui4/input filter-course (e/fn [v] (reset! !filter-course v)))\n                    (dom/table\n                      (dom/th (dom/text \"Name\"))\n                      (dom/th (dom/text \"Code\"))\n                      (dom/th (dom/text \"Department\"))\n                      (dom/th (dom/text \"Class\"))\n                      (dom/th (dom/text \"Instructor\"))\n                      (e/for [value (e/server (dt/q '[:find (pull ?e [*])\n                                                      :in $ ?name\n                                                      :where [?e :course/name ?name]] db filter-course))]\n                             (dom/tr\n                               (dom/td (dom/text (:course/name (first value))))\n                               (dom/td (dom/text (:course/code (first value))))\n                               (dom/td (dom/text (e/server (map (fn [m] (ffirst (dt/q '[:find ?name\n                                                                                        :in $ ?dept-id\n                                                                                        :where [?dept-id :department/name ?name]] db (:db/id m)))) (:course/department (first value))))))\n                               (dom/td (dom/text (:course/class (first value))))\n                               (dom/td (dom/text (e/server (dt/q '[:find ?name\n                                                                   :in $ ?instructor-id\n                                                                   :where [?insturctor-id :instructor/name ?name]] db (:db/id (first (:course/instructor (first value))))))))))))))))))\n\n\n\n"]}