{"version":3,"sources":["app/poms_00_signup_20230831.cljc"],"mappings":";AAMA,iDAAA,jDAAMA,0GAAoBC;AAA1B,AACE,IAAMA,eAAS,AAACC,oBAASD;AAAzB,AACE,GACE,AAACE,uBAAOF;AADV;;AAAA,GAEE,GAAK,EAAA,CAAA,qCAAA,4BAAA,1DAAM,+BAAA,7BAAOA,+BAAAA;AAFpB;;AAAA;;;;AAIJ,qCAAA,rCAAeG,kFAAQC;AAAvB,AACE,IAAMC,OAAK,AAACC,wBAA2BF;IACjCG,QAAM,AAASF;IACfG,UAAQ,AAAWD;IACnBE,cAAY,gEAAA,QAAA,tEAAI,6CAAA,7CAACC,oDAASF;AAHhC,AAIE,QAAM,AAAWD,gBAAOE;;;AAE5B","names":["app.poms-00-signup-20230831/validation-message","username","clojure.string/trim","cljs.core/empty?","app.poms-00-signup-20230831/toggle","elem-id","elem","js/document.getElementById","style","display","new-display","cljs.core._EQ_"],"sourcesContent":["(ns app.poms-00-signup-20230831\n  (:require [clojure.string :as str]\n            [hyperfiddle.electric :as e]\n            [hyperfiddle.electric-dom2 :as dom]\n            [hyperfiddle.electric-ui4 :as ui]))\n\n(defn validation-message [username]\n  (let [username (str/trim username)]\n    (cond\n      (empty? username) \"Username is required\"\n      (not (<= 3 (count username) 12)) \"Username must be between 3 and 12 characters.\")))\n\n(defn ^:export toggle [elem-id]\n  (let [elem (js/document.getElementById elem-id)\n        style (.-style elem)\n        display (.-display style)\n        new-display (if (= \"none\" display) \"block\" \"none\")]\n    (set! (.-display style) new-display)))\n\n(e/defn signup-page []\n        (e/client\n          (dom/h1 (dom/text \"JavaScript Input Validation Example\"))\n          (dom/label (dom/props {:for \"username\"})\n                     (dom/text \"username\"))\n          (let [!username (atom \"\")                         ; Store username\n                username (e/watch !username)]               ; reactive username value\n\n\n            (dom/input\n              (dom/props {:type \"text\"})\n              (dom/on! \"change\" (fn [^js event] (reset! !username (.. event -target -value)))))\n\n            ;; Error Message Element for Username\n            (let [!validate? (atom false)]                  ; Store validation state, stays false until we click the Validate button, then stays true\n              (when (e/watch !validate?)\n                (if-let [message (validation-message username)] ; if there is a validation message (username is invalid)\n                  (dom/span\n                    (dom/props {:style {:color \"red\"}})\n                    (dom/text message))\n                  ;; Else: if validation is on and username is valid, display alert\n                  ;; message then disable validation, hiding the validation message.\n                  ;; User will have to click on the Validate button again. Note\n                  ;; displaying a blocking popup from reactive code must be\n                  ;; implemented carefully so to only display once. I don\u2019t recommend\n                  ;; it for real world use cases.\n                  (do (.alert js/window (str \"Validation passed! Username is: \" username))\n                      (reset! !validate? false)\n                      (toggle \"db-search-result-tables\")\n                      )))\n\n              (dom/h1 (dom/props {:style {\n                                          :display \"none\"}\n                                  :id    \"db-search-result-tables\"\n                                  :class \"db-search-results-table\"})\n                      (dom/text \"merhabalar\"))\n              \n              (dom/button (dom/text \"Validate\")\n                          (dom/on! \"click\" #(reset! !validate? true)))))\n\n          ))"]}