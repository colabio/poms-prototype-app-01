{"version":3,"sources":["app/student_search.cljc"],"mappings":";AAWA,AACA,AAEA,AAAKA,iCAAO,6CAAA,2CAAA,0DAAA,lJAACC;AAab,sCAAA,tCAAMC,oFAAaC;AAAnB,AACE,4GAAA,mFAAA,xLAACC,mDAAMJ,+BAAOK,wKAAoBF;;AACpC","names":["app.student-search/!state","cljs.core.atom","app.student-search/set-search!","name","cljs.core.swap_BANG_","cljs.core/assoc-in"],"sourcesContent":["(ns app.student-search\n  (:require clojure.edn\n            contrib.ednish\n            [contrib.datomic-m #?(:clj :as :cljs :as-alias) d]\n            [hyperfiddle.electric :as e]\n            [hyperfiddle.electric-dom2 :as dom]\n            [hyperfiddle.electric-ui4 :as ui4]\n            [hyperfiddle.history :as history]\n            #?(:clj [datomic.client.api :as dt])))\n\n\n(e/def conn)\n(e/def db)\n\n(def !state (atom {:keyword \"\"}))\n\n#?(:clj (defn query-name [db dept]\n          (dt/q '[:find (pull ?e [*])\n                  :in $ ?dept\n                  :where [?e :student/name ?dept]]\n\n                db dept)))\n#?(:clj (defn query-dept [db dept]\n          (dt/q '[:find (pull ?e [*])\n                  :in $ ?id\n                  :where [?e :student/department ?id]] db dept)))\n\n(defn set-search! [name]\n  (swap! !state assoc-in [:keyword] name))\n(e/defn StudentSearch []\n        (e/server\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\n            (binding [db (dt/db conn)]\n             (e/client\n               (let [state (e/watch !state)]\n                 #_(dom/div\n                     (let [stage (:keyword state)]\n                      (dom/h1 (dom/text \"Student Search\"))\n                      (dom/span (dom/props {:style {:grid-area \"i\"}}) (dom/text \"Student Name\"))\n                      (ui4/input stage (e/fn [v] (set-search! v)))))\n                 (dom/div\n                   (let [!filter-dept (atom \"\"), filter-dept (e/watch !filter-dept)]\n                     (dom/span  (dom/text \"Student Search by Name:\"))\n                     (ui4/input filter-dept (e/fn [v] (reset! !filter-dept v)))\n\n\n                     (dom/ul\n                       (dom/table\n                         (dom/th (dom/text \"Id\"))\n                         (dom/th (dom/text \"Name\"))\n                         (dom/th (dom/text \"Department\"))\n                         (e/for [entry (e/server (query-name db filter-dept))]\n                                (let [value entry]\n\n                                  #_(dom/li (dom/text (:student/id value) \", \" (:student/name value) \",\" (:student/department value)))\n                                  (dom/tr (dom/props {:style {:border-style :solid :border-collapse :collapse}})\n\n                                          (dom/td (dom/text (:student/id (first value))))\n                                          (dom/td (dom/text (:student/name (first value))))\n                                          (dom/td (dom/text (ffirst (e/server (dt/q '[:find ?name\n                                                                                      :in $ ?dept-id\n                                                                                      :where [?dept-id :department/name ?name]] db (:db/id (:student/department (first value)))))))))))))))\n                 (dom/div\n                   (let [!filter-dept (atom \"\"), filter-dept (e/watch !filter-dept)]\n                     (dom/span  (dom/text \"Student Search by Department:\"))\n                     (ui4/input filter-dept (e/fn [v] (reset! !filter-dept v)))\n\n                     #_(dom/text (e/server (dt/q '[:find (pull ?e [*])\n                                                   :in $ ?id\n                                                   :where [?e :student/department ?id]] db (ffirst (dt/q '[:find ?dept-id\n                                                                                                           :in $ ?name\n                                                                                                           :where [?dept-id :department/name ?name]] db \"Fizik\")))))\n\n\n                     (dom/ul\n                       (dom/table\n                         (dom/th (dom/text \"Id\"))\n                         (dom/th (dom/text \"Name\"))\n                         (dom/th (dom/text \"Department\"))\n                         (e/for [entry (e/server (query-dept db (ffirst (dt/q '[:find ?dept-id\n                                                                                :in $ ?name\n                                                                                :where [?dept-id :department/name ?name]] db (clojure.string/capitalize filter-dept)))))]\n                                (let [value entry]\n\n                                  #_(dom/li (dom/text (:student/id value) \", \" (:student/name value) \",\" (:student/department value)))\n                                  (dom/tr (dom/props {:style {:border-style :solid :border-collapse :collapse}})\n\n                                          (dom/td (dom/text (:student/id (first value))))\n                                          (dom/td (dom/text (:student/name (first value))))\n                                          (dom/td (dom/text (ffirst (e/server (dt/q '[:find ?name\n                                                                                      :in $ ?dept-id\n                                                                                      :where [?dept-id :department/name ?name]] db (:db/id (:student/department (first value)))))))))))))))))))))\n\n\n"]}