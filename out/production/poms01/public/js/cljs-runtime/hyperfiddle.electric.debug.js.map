{"version":3,"sources":["hyperfiddle/electric/debug.cljc"],"mappings":"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","names":["hyperfiddle.electric.debug/->id","cljs.core/random-uuid","js/hyperfiddle","js/hyperfiddle.electric","js/hyperfiddle.electric.debug","js/hyperfiddle.electric.debug.PEER-ID","hyperfiddle.electric.debug/PEER-ID","var_args","G__49693","hyperfiddle.electric.debug/ex-info*","js/Error","message","data","hyperfiddle.electric.debug.ex_info_STAR_","cause","id","js/hyperfiddle.electric.FailureInfo","cljs.core.assoc","hyperfiddle.electric.debug/generated__hyperfiddle_electric_debug_26","js/hyperfiddle.electric.debug.t_hyperfiddle$electric$debug49989","hyperfiddle.electric.debug/t_hyperfiddle$electric$debug49989","_49991","meta49990","cljs.core/PROTOCOL_SENTINEL","unused__14959__auto__","self__","G__50002","args49992","cljs.core/aclone","done-49880","___14619__auto__","RCF__done!","hyperfiddle.rcf/async-notifier","cljs.test.update_current_env_BANG_","cljs.core/conj","values__10703__auto__","cljs.core/List","result__10704__auto__","cljs.core.apply","hyperfiddle.rcf/=","cljs.test/do-report","cljs.core/cons","cljs.core/first","t__10691__auto__","e50018","cljs.test/update-current-env!","cljs.core/rest","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.electric.debug/->t_hyperfiddle$electric$debug49989","hyperfiddle.rcf/*enabled*","cljs.test/run-block","cljs.test/test-var-block*","hyperfiddle.electric.debug/ex-id","ex","hyperfiddle.electric.debug/add-stack-frame","frame","cljs.core/ex-message","cljs.core.update","cljs.core/ex-data","or__5045__auto__","cljs.core/ex-cause","hyperfiddle.electric.debug/error","debug-info","failure","err","js/hyperfiddle.electric.Pending","js/missionary.Cancelled","js/hyperfiddle.electric.Failure","hyperfiddle.electric.debug/generated__hyperfiddle_electric_debug_45","js/hyperfiddle.electric.debug.t_hyperfiddle$electric$debug50136","hyperfiddle.electric.debug/t_hyperfiddle$electric$debug50136","_50138","meta50137","G__50146","args50139","done-50118","e50151","hyperfiddle.electric.debug/->t_hyperfiddle$electric$debug50136","hyperfiddle.electric.debug/ex","hyperfiddle.electric.debug/render-arg","arg","cljs.core/ident?","cljs.core.symbol","*print-level*-orig-val__50167","*print-length*-orig-val__50168","*print-level*-temp-val__50169","*print-length*-temp-val__50170","cljs.core/*print-level*","cljs.core/*print-length*","cljs.core.pr_str","hyperfiddle.electric.debug/serializable-frame","cljs.core.partial","cljs.core/mapv","hyperfiddle.electric.debug/serializable","map","cljs.core/contains?","hyperfiddle.electric.debug/normalize-frame","meta","dbg-in-meta","contrib.data/select-ns","cljs.core.merge","cljs.core.dissoc","hyperfiddle.electric.debug/stack-trace","G__50184","cljs.core.remove","cljs.core._EQ_","cljs.core.filter","cljs.core.reduce","r","cljs.core.conj","map__50190","cljs.core/--destructure-map","cljs.core.get","origin","type","name","params","args","macro","scope","cljs.core.into","and__5043__auto__","cljs.core.not_EQ_","cljs.core/not","fexpr__50196","G__50199","cljs.core/Keyword","G__50202","cljs.core/vec","cljs.core.sequence","cljs.core/seq","cljs.core.concat","G__50204","cljs.core.map","map__50205","action","target","method","G__50209","cljs.core/name","G__50224","G__50225","cljs.core.mapv","clojure.string.join","cljs.core/nil?","hyperfiddle.electric.debug/unwrap","exception"],"sourcesContent":["(ns hyperfiddle.electric.debug\n  (:require #_[hyperfiddle.electric.impl.runtime :as-alias r]\n            [clojure.string :as str]\n            [contrib.data :as data]\n            [hyperfiddle.electric.impl.ir :as-alias ir]\n            [hyperfiddle.rcf :as rcf :refer [tests]])\n  (:import (hyperfiddle.electric Failure Pending)\n           (missionary Cancelled)\n           #?(:clj (clojure.lang ExceptionInfo))\n           (hyperfiddle.electric FailureInfo)))\n\n(defn ->id []\n  #?(:clj  (java.util.UUID/randomUUID)\n     :cljs (random-uuid)))\n\n(defonce ^{:doc \"A random unique ID generated for each Electric runtime instance (browser tab, jvm). Used to identify origin of a transfered value.\"}\n  PEER-ID\n  ;; UUID v4 collision probability assumed insignificant for this use case\n  (->id))\n\n(defn ex-info*\n  ([message data] (ex-info* message data nil))\n  ([message data cause] (ex-info* message data (str (->id)) cause))\n  ([message data id cause] (FailureInfo. message (assoc data :hyperfiddle.electric/type ::trace) id cause)))\n\n(tests \"2 traces with equal values are =\"\n  (let [cause #?(:clj (Throwable.) :cljs (js/Error.))]\n    (ex-info* \"\" {} cause) := (ex-info* \"\" {} cause)\n    nil))\n\n(defn ex-id [ex] (.-id ^FailureInfo ex))\n\n(defn add-stack-frame [frame ex]\n  (let [frame (assoc frame ::origin PEER-ID)]\n   (if (instance? FailureInfo ex)\n    (ex-info* (ex-message ex) (update (ex-data ex) ::trace conj frame) (ex-id ex) (or (ex-cause ex) ex))\n    (ex-info* (ex-message ex) {::trace [frame]} ex))))\n\n(defn error [debug-info ^Failure failure]\n  (let [err (.-error failure)]\n    (if (or (instance? Pending err) (instance? Cancelled err))\n      failure\n      (Failure. (add-stack-frame debug-info err)))))\n\n(tests \"rewrapping keeps same ID\"\n  (def ex (ex-info* \"x\" {}))\n  (ex-id ex) := (ex-id (add-stack-frame {} ex)))\n\n(defn render-arg [arg]\n  (cond\n    (string? arg) arg\n    (ident? arg)  arg\n\n    (or (instance? hyperfiddle.electric.Failure arg)\n      #?(:clj (instance? Throwable arg)\n         :cljs (instance? js/Error arg)))\n    (symbol \"<exception>\")\n\n    :else\n    (binding [*print-level*  1\n              *print-length* 4]\n      (pr-str arg))))\n\n(defn serializable-frame [frame]\n  (if (::serializable frame)\n    frame\n    (-> (update frame ::args (partial mapv render-arg))\n        (assoc ::serializable true))))\n\n(defn serializable [map]\n  (if (contains? map ::trace)\n    (update map ::trace (partial mapv serializable-frame))\n    map))\n\n(defn normalize-frame [frame]\n  (let [meta        (::meta frame)\n        dbg-in-meta (data/select-ns :hyperfiddle.electric.debug (::meta frame))]\n    (merge frame dbg-in-meta {::meta (dissoc meta dbg-in-meta)})))\n\n(defn stack-trace [err]\n  (some->> (::trace (ex-data err))\n    (remove (fn [frame] (= {} (::name frame)))) ; (do a b) => ({} a b)\n    (filter ::type)\n    (reduce (fn [r frame]\n              (if (string? frame)\n                (conj r frame)\n                (let [{::keys [origin type name params args macro scope meta]} (normalize-frame frame)]\n                  (conj r\n                    (into [(when (and (not= PEER-ID origin)\n                                   (not (#{:transfer :toggle} type))\n                                   \"remote\"))\n                           (case scope\n                             :lexical \"lexically bound\"\n                             :dynamic \"dynamically bound\"\n                             nil)]\n                      (into\n                        (case type\n                          :apply         `[\"(\" ~(case name\n                                                  hyperfiddle.electric.impl.runtime/fail 'throw\n                                                  name)\n                                           ~@(map render-arg args) \")\"]\n                          :eval (let [{::keys [action target method args]} frame]\n                                  (case action\n                                    :field-access [\"(\" (str \".-\" method) target \")\"]\n                                    :static-call  `[\"(\" ~(str target \"/\" method) ~@(map render-arg (rest args)) \")\"]\n                                    :call         `[\"(\" ~(str \".\" method) ~target ~@(map render-arg (rest args))\")\"]\n                                    :fn-call      (if (some? name)\n                                                    `[\"(\" (clojure.core/fn ~name [~@params] ~'...) ~@(map render-arg args) \")\"]\n                                                    `[\"(\" (clojure.core/fn [~@params] ~'...) ~@(map render-arg args) \")\"])\n\n                                    [\"<unknown interop>\" frame]))\n                          :reactive-fn   [\"reactive\" (if (some? name)\n                                                       `(~'fn ~name ~args ~'...)\n                                                       `(~'fn ~args ~'...))]\n                          :reactive-defn [\"reactive\" `(~'defn ~name ~args ~'...)]\n                          :try           [\"(try ...)\" ]\n                          :catch         [`(~'catch ~@args ~'...)]\n                          :finally       [\"(finally ...)\"]\n                          :case-clause   [`(~'case ~@args ~'...)]\n                          :case-default  [\"case default branch\"]\n                          :transfer      [\"transfer to\" (clojure.core/name name)]\n                          :toggle        [\"transfer\"]\n                          `[\"<unknow frame>\" ~(::ir/op frame)])\n                        [(when macro (str \"from macro \" macro))\n                         (some->> (:file meta) (str \"in \"))\n                         (some->> (:line meta) (str \"line \"))]))))))\n      [])\n    (mapv (fn [frame] (if (string? frame) frame (str \" in \" (str/join \" \" (remove nil? frame))))))\n    (str/join \"\\n\")))\n\n(defn unwrap [exception]\n  (if (= ::trace (:hyperfiddle.electric/type (ex-data exception)))\n    (ex-cause exception)\n    exception))\n"]}