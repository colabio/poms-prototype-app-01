{"version":3,"sources":["hyperfiddle/electric/impl/io.cljc"],"mappings":";AAqBS,AAAA,CAAA,AAAA,8DAAAA,9DAAaC;AAEtB,AAAKC,qDACH,AAACC,8DACC,WAAKC;AAAL,AACE,AAAKC,6DAA8BD;;AACnC,YAAA,ZAAyBE,iDAAqD,AAACC,wGAAO,AAACC,eAAKJ,SAAI,4CAAKA;;AAFvG;GAIA,WAAKA;AAAL,AAAA;GACA,WAAKK;AAAL,AAAA;;AAEJ;;;;;0CAAA,1CAAMC,4FAEiDC;AAFvD,AAGE,IAAAC,WAAM,AAACG,qDAAa,gBAAA,fAAK,QAAA,PAAGJ;AAA5B,AAAA,IAAAE,iBAAAD;AAAA,AAAA,CAAAC,+BAAA,AAAAC,mBAAA,nCAA6C,QAAA,PAAGH;;AAAhDC;;AACF,yCAAA,zCAAMI,0FAAWC,MAAMC,EAAEC;AAAzB,AACE,oBAAU,qBAAA,JAAOC;;AAAP,AACE,GAAM,CAAGA,IAAE,0BAAA,zBAAK,AAACC,gBAAMJ;AAAvB,AACE,GAAI,AAACK,6CAAEJ,EAAE,AAACK,2CAAMN,MAAMG;AACpB,AAAI,IAAAI,iBAAOP;AAAP,AAAA,CAAAO,4BAAA,AAAAV,bAAa,KAAA,JAAKM,+BAAGD;;AAAzB;;AACA,eAAO,KAAA,JAAGC;;;;;AAHd;;;;;AADZ;;AAAA,AAKE,IAAMK,OAAK,oFAAA,WAAAC,/FAACC,+CAAUV,MAAM,0BAAA,zBAAK,AAACI,gBAAMJ;AAA7B,AAAsC,OAACW,cAAI,CAAAF,mBAAA,KAAQ,0BAAA,zBAAK,AAACL,gBAAMJ;;AAA1E,AACE,IAAAY,WAAOZ;AAAP,AAAA,CAAAY,iBAAA,AAAAf,RAAaW,2BAAKP;;AAAlB,QAAAW,yBAAA,AAAAf,hBAAqB,QAAA,PAAKW,kCAAMN;;;AACtC,yCAAA,zCAAMW,0FAAWb,MAAMC;AAAvB,AACE,QAAA,JAAOE;;AAAP,AACE,GAAM,CAAGA,IAAE,0BAAA,zBAAK,AAACC,gBAAMJ;AAAvB,AACE,GAAI,AAACK,6CAAEJ,EAAE,AAACK,2CAAMN,MAAMG;AACpB,OAACG,2CAAMN,MAAM,KAAA,JAAKG;;AAClB,eAAO,KAAA,JAAGA;;;;;AAHd;;;;;AAIJ,6CAAA,7CAAMW,kGAAYd;AAAlB,AACE,QAAA,JAAOG;IAAKY,KAAG,qBAAA,rBAACC;;AAAhB,AACE,GAAI,CAAGb,IAAE,0BAAA,zBAAK,AAACC,gBAAMJ;AACnB,eAAO,KAAA,JAAGG;eAAK,AAACc,oDAAOF,GAAG,AAACT,2CAAMN,MAAMG,GAAG,AAACG,2CAAMN,MAAM,KAAA,JAAKG;;;;;AAC5D,OAACe,2BAAYH;;;;;AAEnB,AAAA,AAAAI,0EAAA;AAAA,AAAA,AAAA,GAAA,QAAAC,wCAAAC,iDAAAC,sDAAAC,yDAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,oHAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,iEAAAE;;;AAAA,CAAA,AAAA,AAAAF,2GAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,mGAAA1C;;AAAA,CAAA,AAAA,AAAA0C,kFAAA,WAAAG;;AAAA,AAAA,IAAAC,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD,qCAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,AAAAN,mFAAA,WAAAI,OAAAG;;AAAA,AAAA,IAAAH,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,AAAAP,2GAAA,WAAAS;;AAAA,AAAA,IAAAC,mBAAA;AAAA,AAAA,IAAAC,kBAAA,AAAAC,+BAAA,EAAAH;AAAA,AAAA,AAAA,AAAAI,wEAAA,mFAAA,sFAAAC,iEAAA;;AAAA,IAAA,AAAA,AAAA,uCAAA,wCAAA,/EACOyB,uCAAIvE;;AADX,4EAAA,IAAA,hFAEGM,uCAAUiE;;AAFb,IAAA,AAAA,IAAAxB,8BAAA,KAAAC,eAAA,KAAA,4EAAA,KAAA,KAAAA,eAAA,KAAA,IAAA,KAAA,IAAA,OAAA,IAAA,lIAEsB5B,uCAAUmD;IAFhCtB,8BAAA,AAAAC,8CAAAC,qBAAAJ;AAAA,AAAA,oBAAAE;AAAA,AAAAG,oBAAA,2CAAA,qDAAA,iFAAA,6DAAA,AAAA,qNAAA,wDAAA,AAAAC,eAAA,AAAA,gFAAAN,6BAAA,2DAAA;;AAAA,AAAAK,oBAAA,2CAAA,qDAAA,kFAAA,6DAAA,AAAA,qNAAA,wDAAA,KAAAJ,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,KAAA,AAAAK,eAAA,AAAA,oDAAAN,6BAAA,KAAA,IAAA,OAAA,IAAA,OAAA,2DAAA;;;AAAA,AAAAO,gBAAAP;gBAAA,IAAAQ,yBAAAC;AAAA,AAAA,AAAAJ,oBAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,KAAA,KAAA,uDAAA,KAAA,KAAA,AAAA,iPAAA,KAAAG,uBAAA;UAAA,AAAA,AAAAZ;;AAAA,4EAAA,IAAA,hFAGGrC,uCAAUiE;;AAHb,IAAA,AAAA,IAAAxB,8BAAA,KAAAC,eAAA,KAAA,4EAAA,KAAA,KAAAA,eAAA,KAAA,IAAA,KAAA,IAAA,OAAA,IAAA,lIAGsB5B,uCAAUmD;IAHhCtB,8BAAA,AAAAC,8CAAAC,qBAAAJ;AAAA,AAAA,oBAAAE;AAAA,AAAAG,oBAAA,2CAAA,qDAAA,iFAAA,6DAAA,AAAA,qNAAA,wDAAA,AAAAC,eAAA,AAAA,gFAAAN,6BAAA,2DAAA;;AAAA,AAAAK,oBAAA,2CAAA,qDAAA,kFAAA,6DAAA,AAAA,qNAAA,wDAAA,KAAAJ,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,KAAA,AAAAK,eAAA,AAAA,oDAAAN,6BAAA,KAAA,IAAA,OAAA,IAAA,OAAA,2DAAA;;;AAAA,AAAAO,gBAAAP;gBAAA,IAAAQ,yBAAAE;AAAA,AAAA,AAAAL,oBAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,KAAA,KAAA,uDAAA,KAAA,KAAA,AAAA,iPAAA,KAAAG,uBAAA;UAAA,AAAA,AAAAZ;;AAAA,4EAAA,IAAA,hFAIGrC,uCAAUiE;;AAJb,IAAA,AAAA,IAAAxB,8BAAA,KAAAC,eAAA,KAAA,4EAAA,KAAA,KAAAA,eAAA,KAAA,IAAA,KAAA,IAAA,OAAA,IAAA,lIAIsB5B,uCAAUmD;IAJhCtB,8BAAA,AAAAC,8CAAAC,qBAAAJ;AAAA,AAAA,oBAAAE;AAAA,AAAAG,oBAAA,2CAAA,qDAAA,iFAAA,6DAAA,AAAA,qNAAA,wDAAA,AAAAC,eAAA,AAAA,gFAAAN,6BAAA,2DAAA;;AAAA,AAAAK,oBAAA,2CAAA,qDAAA,kFAAA,6DAAA,AAAA,qNAAA,wDAAA,KAAAJ,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,KAAA,AAAAK,eAAA,AAAA,oDAAAN,6BAAA,KAAA,IAAA,OAAA,IAAA,OAAA,2DAAA;;;AAAA,AAAAO,gBAAAP;gBAAA,IAAAQ,yBAAAG;AAAA,AAAA,AAAAN,oBAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,KAAA,KAAA,uDAAA,KAAA,KAAA,AAAA,iPAAA,KAAAG,uBAAA;UAAA,AAAA,AAAAZ;;AAAA,IAAA,AAAA,IAAAI,8BAAA,KAAAC,eAAA,KAAA,iFAAA,KAAAA,eAAA,KAAA,2CAAA,IAAA,YAAA,KAAA,IAAA,OAAA,IAAA,zLAKG3B,2CAAWkD;IALdtB,8BAAA,AAAAC,8CAAAC,qBAAAJ;AAAA,AAAA,oBAAAE;AAAA,AAAAG,oBAAA,2CAAA,qDAAA,iFAAA,6DAAA,AAAA,wQAAA,wDAAA,AAAAC,eAAA,AAAA,gFAAAN,6BAAA,2DAAA;;AAAA,AAAAK,oBAAA,2CAAA,qDAAA,kFAAA,6DAAA,AAAA,wQAAA,wDAAA,KAAAJ,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,KAAA,AAAAK,eAAA,AAAA,oDAAAN,6BAAA,KAAA,IAAA,OAAA,IAAA,OAAA,2DAAA;;;AAAA,AAAAO,gBAAAP;gBAAA,IAAAQ,yBAAAI;AAAA,AAAA,AAAAP,oBAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,KAAA,KAAA,uDAAA,KAAA,KAAA,AAAA,oSAAA,KAAAG,uBAAA;UAAA,AAAA,AAAAZ;;AAAA,AAAA,AAAAE,wEAAA,mFAAA,sFAAAC,iEAAA;;AAAA,IAAA,AAAA,AAAA,uCAAA,wCAAA,/EAQOyB,uCAAIvE;;AARX,4EAAA,IAAA,hFASGM,uCAAUiE;;AATb,4EAAA,IAAA,hFAUGjE,uCAAUiE;;AAVb,4EAAA,IAAA,hFAWGjE,uCAAUiE;;AAXb,IAAA,AAAA,IAAAxB,wBAAA,KAAAC,eAAA,KAAA,iFAAA,KAAAA,eAAA,KAAA,2CAAA,IAAA,IAAA,IAAA,YAAA,KAAA,IAAA,OAAA,IAAA,jMAYG3B,2CAAWkD;IAZdtB,wBAAA,AAAAC,8CAAAC,qBAAAJ;AAAA,AAAA,oBAAAE;AAAA,AAAAG,oBAAA,2CAAA,qDAAA,iFAAA,6DAAA,AAAA,gRAAA,wDAAA,AAAAC,eAAA,AAAA,gFAAAN,uBAAA,2DAAA;;AAAA,AAAAK,oBAAA,2CAAA,qDAAA,kFAAA,6DAAA,AAAA,gRAAA,wDAAA,KAAAJ,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,KAAA,AAAAK,eAAA,AAAA,oDAAAN,uBAAA,KAAA,IAAA,OAAA,IAAA,OAAA,2DAAA;;;AAAA,OAAAO,gBAAAP;gBAAA,IAAAQ,mBAAAK;AAAA,AAAA,OAAAR,oBAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,KAAA,KAAA,uDAAA,KAAA,KAAA,AAAA,4SAAA,KAAAG,iBAAA;UAAA,AAAA,AAAAZ;WAAA,AAAA,AAAAkB,mCAAA,mFAAA,sFAAAC;WAAA,AAAA,AAAAD,mCAAA,mFAAA,sFAAAC;;;AAAA,CAAA,AAAA9B,4EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,kFAAA;;AAAA,CAAA,AAAAA,qFAAA;;AAAA,CAAA,AAAAA,0FAAA,WAAA+B,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;AAAAG,wEAAA,6HAAAjC;AAAA,AAAA,YAAAF,iEAAAE;;;AAAAF;;AAAA,YAAAA,iEAAA;;;AAAA,GAAAoC;AAAA,AAAA,AAAAC,oBAAA,AAAAC,+BAAA,8GAAA,AAAA,2LAAA,2CAAA,6DAAA,AAAA,iDAAA,sDAAA,AAAA,oCAAA,gDAAA,AAAA,8OAAA,mDAAA,AAAA,KAAA,oDAAA,AAAA,GAAA,yDAAA,AAAA,EAAA,qDAAA,AAAA,qIAAA,oDAAA,kBAAA5C,yEAAA,AAAA,AAAAA,uFAAA,eAAAA;;AAAA;AAcA,AAAK8C,8CAAU,wCAAA,xCAACxE;AAChB,sDAAA,tDAAMyE,oHAAmBC;AAAzB,AACE,IAAMC,KAAG,AAACC,iCAAUF;AAApB,AACE,IAAAG,2BAAkB,AAACE,mBAASL;AAA5B,AAAA,GAAA,CAAAG,4BAAA;AAAA;AAAA,kBAAAA,dAAYC;AAAZ,AACE,GAAU,wBAAWE,vBAAYF;AAAjC;AAAA,AACE,AAACxE,uCAAUkE,4CAAUG,GAAGG;;;;AAC5BH;;AACJ,+CAAA,/CAAMM,sGAAiBN;AAAvB,AAA2B,OAACvD,uCAAUoD,4CAAUG;;AAEhD,0DAAA,1DAAeO;AAEf,AAAKC,8CAAe,AAAC1F,8DACC,WAAKM;AAAL,AAAA;GACA,WAAKL;AAAL,AACE,IAAM0F,MAAI,AAAkB1F;AAA5B,AACE,GAAM,gBAAW2F,fAAUD;AAA3B,0FAAA;;AAAA,GACM,gBAAWE,fAAQF;AADzB,0FAAA;;AAAA,GAEM,gBAAWG,fAAOH;AAFxB,0FAAA,0DAEyC,AAACI,wCAAiB,AAACC,kBAAQL;;AAFpE,AAAA,0FAAA,+DAG4C,AAACM,qBAAWN,KAAK,AAACI,wCAAiB,AAACC,kBAAQL,MACvD,AAACX,oDAAkBW;;;;;;AAE9E,0CAAA,1CAAMO;AAAN,AAAA,kDAAA,0cAAA,/YACa,+JAAA,yHAAA,xRAACC,uGAAMV,wGACJW,6BAAQV,wGACC3F,uIACLA;;AAEpB,yDAAA,zDAAesG;AAEf,AAAKC,8CAAe,AAACC,+BACC,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAA/C,gBAAA6C;IAAAA,iBAAA,AAAAG,eAAAH;UAAAE,NAAME;WAANJ,PAAYK;AAAZ,AACE,IAAAC,WAAMF;IAANE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACa,IAAAE,aAAwBH;cAAxB,AAAAI,4CAAAD,WAAA,IAAA,rEAAOE;WAAP,AAAAD,4CAAAD,WAAA,IAAA,lEAAeG;SAAf,AAAAF,4CAAAD,WAAA,IAAA,hEAAoBhC;AAApB,AACE,YAAAkB,6BAAU,uFAAA,vFAACkB,uEAAaF,QAAQC,KAAKnC;;;KAFpD;AAGa,IAAAqC,aAAaR;WAAb,AAAAI,4CAAAI,WAAA,IAAA,lEAAOF;AAAP,AACE,YAAAjB,6BAAU,uEAAA,vEAACkB,sFAA4B,iBAAAE,mBAAIH;AAAJ,AAAA,oBAAAG;AAAAA;;AAAA;;;;;KAJtD;AAKa,YAAApB,6BAAU,KAAAP;;;KALvB;AAMa,YAAAO,6BAAU,KAAAR;;;;AANvB,MAAA,KAAA/C,MAAA,CAAA,mEAAAmE;;;;AAQxB,yCAAA,zCAAMS;AAAN,AAAA,kDAAA,2DAA8B,8JAAA,2CAAA,zMAACtB,uGAAME,4GAA2BC;;AAEhE,AAAKoB,wCACH,AAACC,gDAAQC,oBACP,WAAKC,EAAE5G,EAAE6G;AAAT,AACE,IAAMC,SAAO,MAAA,LAAgB9G;AAA7B,AAEW,IAAA+G,WAAMH;AAAN,AAAA,AAAAG,kBAAmBD,OAAOD;;AAA1BE;;AAEjB;;;8CAAA,9CAAMC,oGAEHC;AAFH,AAGE,IAAMC,WAAS,wBAAA,vBAAgB,AAACjH,gBAAMgH;AAAtC,AAEW,IAAAE,WAAM,KAAAC,YAAiBF;AAAvB,sCACM,KAAAG,SAAAF,pDAAe,AAACV,+DAASQ;;AAD/BE;;AAGb;;;8CAAA,9CAAMG,oGAEHC;AAFH,AAGE,OAACC,cACC;AAAA,GAAA,QAAAvG,wCAAAC,iDAAAC,sDAAAC,yDAAAqG;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,oHAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;6EAFDJ,7EAEC,AAAA,YAAAG,0EAAAE;;;AAAA,CAAA,AAAA,AAAAF,2GAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,+GAAA,WAQqBrI,EAAEyI,GAAGlB;;AAR1B,AAAA,YAAA,RAQqBvH;AARrB,AASa,IAAM0I,IAAE,AAAcR;IAChBxH,IAAE,KAAAsH,SAAcE;AADtB,AAEE,IAAOX,QAAEA;QAAT,JAAY5G;;AAAZ,AACE,GAAI,CAAGA,IAAE+H;AACP,eAAO,iBAAAC,WAAIpB;IAAJqB,WAAM,AAAWlI,WAAEC;AAAnB,AAAA,4EAAAgI,SAAAC,yBAAAD,SAAAC,/GAACH,mCAAAA,sDAAAA;;eACN,KAAA,JAAG9H;;;;;AAAM4G;;;;;;AAd9B,CAAA,AAAAc,4EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,kFAAA;;AAAA,CAAA,AAAAA,qFAAA;;AAAA,CAAA,AAAAA,0FAAA,WAAArE,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;yKAFDiE,zKAECM,wEAAA,uGAAAD;6EAFDL,7EAEC,AAAA,YAAAG,uEAAAE;;;AAAAF;;6EAFDH,7EAEC,YAAAG,mEAAA;;;;AAkBK,IAAMQ,oBAAO,6CAAA,2CAAA,kIAAA,yDAAA,nRAACC,kKAAsB3D;AAApC,AACE,8CAAA,9CAAM4D;AAAN,AACE,OAAA,uFAAS,AAACC,mDAAMH,kBAAO,WAAAI;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAAwC1I;qBAAxC,AAAA4I,4CAAAF,eAAA,5EAAaG;aAAb,AAAAD,4CAAAF,eAAA,pEAA4BI;AAA5B,AACE,GAAI,AAACzI,6CAAEwI,eAAelE;AACpB,oBAAImE;AACF9I;;AACA,2DAAA,pDAAC+I,8CAAM/I,+DAAc,uDAAA,vDAACgJ,4GAAe,AAAC5D;;;AAH1C,kDAAA,kIAAA,xDAImBT,iHACA,uDAAA,vDAACqE,4GAAe,AAAC5D;;;;AAE1E;;;sCAAA,tCAAM6D,oFAEH9J;AAFH,AAMW,OAAC+J,wBAAQ,AAACX,8CAAgBpJ;;AAG5B,IAAMkJ,oBAAO,6CAAA,2CAAA,8HAAA,wDAAA,9QAACC,+JAAqB/C;AAAnC,AACE,8CAAA,9CAAM4D;AAAN,AACE,OAAA,sFAAS,AAACX,mDAAMH,kBAAO,WAAAe;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAV,4BAAAU;YAAAA,RAAuCrJ;oBAAvC,AAAA4I,4CAAAS,eAAA,3EAAaC;aAAb,AAAAV,4CAAAS,eAAA,pEAA2BE;AAA3B,AACE,GAAI,AAAClJ,6CAAEiJ,cAAc/D;AACnB,oBAAIgE;AACFvJ;;AACA,2DAAA,pDAAC+I,8CAAM/I,8DAAc,uDAAA,vDAACwJ,4GAAe,AAAC7C;;;AAH1C,kDAAA,8HAAA,vDAIkBpB,+GACA,uDAAA,vDAACiE,4GAAe,AAAC7C;;;;AAGzE;;;sCAAA,tCAAM8C,oFAEKC;AAFX,AAIW,OAACC,uBAAO,AAACR,8CAAgBO;;AAEpC,0CAAA,1CAAME,4FAAYzK;AAAlB,AACE,IAAA,AAAK,IAAA2K,WAAM,AAACL,oCAAOtK;AAAd,AAAsB,cAAA,eAAA2K,7BAA0BC;;AAAhDD;gBAAL,QAAAD,JAC2CG;AAD3C,AAEI,MAAO,gDAAA,mBAAA,2CAAA,9GAACC,oKAAmC9K,UAAG6K;;AAEpD,AAAA,AAAAE,2EAAA;AAAA,AAAA,AAAA,GAAA,QAAA9I,wCAAAC,iDAAAC,sDAAAC,yDAAA4I;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,oHAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,iEAAAE;;;AAAA,CAAA,AAAA,AAAAF,2GAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,mGAAArL;;AAAA,CAAA,AAAA,AAAAqL,kFAAA,WAAAxI;;AAAA,AAAA,IAAAC,SAAA;AAAA,AAAA,IAAA0I,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAA1I,qCAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,AAAAqI,mFAAA,WAAAvI,OAAA2I;;AAAA,AAAA,IAAA3I,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAuI;;;AAAA,CAAA,AAAA,AAAAJ,2GAAA,WAAAK;;AAAA,AAAA,IAAAtI,mBAAA;AAAA,AAAA,IAAAC,kBAAA,AAAAC,+BAAA,EAAAoI;AAAA,AAAA,AAAA,AAAAnI,wEAAA,mFAAA,sFAAAC,iEAAA;;AAAA,IAAA,AAAA,AAAA,qCAAA,gDAAA,OAAA,5FACOsI,qCAAOZ;;AADd,kCAAA,uEAAA,IAAA,7GAEOa,kCAAItE,8GAAoBqE;;AAF/B,oCAAA,AAAA,oCAAA,oCAAA,KAAAvF,jHAGOyF,8IAASD,tEAAY7B,pCAAOQ;;AAHnC,AAAA,AAAAnH,wEAAA,mFAAA,sFAAAC,iEAAA;;AAAA,IAAA,AAAA,AAAA,IAAA,AAAA,IAAAC,8BAAA,KAAAC,eAAA,KAAA,kEAAA,KAAAA,eAAA,KAAA,oEAAA,KAAA,IAAA,OAAA,IAAA,nLAKG4B,iCAAUyG,0DAAQzG,iCAAU0G;IAL/BrI,8BAAA,AAAAC,8CAAAC,qBAAAJ;AAAA,AAAA,oBAAAE;AAAA,AAAAG,oBAAA,2CAAA,qDAAA,iFAAA,6DAAA,AAAA,gVAAA,wDAAA,AAAAC,eAAA,AAAA,gFAAAN,6BAAA,2DAAA;;AAAA,AAAAK,oBAAA,2CAAA,qDAAA,kFAAA,6DAAA,AAAA,gVAAA,wDAAA,KAAAJ,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,KAAA,AAAAK,eAAA,AAAA,oDAAAN,6BAAA,KAAA,IAAA,OAAA,IAAA,OAAA,2DAAA;;;AAAA,AAAAO,gBAAAP;gBAAA,IAAAQ,yBAAA0H;AAAA,AAAA,AAAA7H,oBAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,KAAA,KAAA,uDAAA,KAAA,KAAA,AAAA,4WAAA,KAAAG,uBAAA;UAAA,AAAA,AAAAZ;;AAAA,AAAA,AAAAE,wEAAA,mFAAA,sFAAAC,iEAAA;;AAAA,IAAA,AAAA,AAAA,IAAA,AAAA,IAAAC,8BAAA,KAAAC,eAAA,KAAA,6CAAA,qEAAA,KAAAA,eAAA,wCAAA,KAAA,IAAA,OAAA,IAAA,lMAOGiC,6CAAiBL,iCAAU0G,6DAAUF;IAPxCnI,8BAAA,AAAAC,8CAAAC,qBAAAJ;AAAA,AAAA,oBAAAE;AAAA,AAAAG,oBAAA,2CAAA,qDAAA,iFAAA,6DAAA,AAAA,sWAAA,wDAAA,AAAAC,eAAA,AAAA,gFAAAN,6BAAA,2DAAA;;AAAA,AAAAK,oBAAA,2CAAA,qDAAA,kFAAA,6DAAA,AAAA,sWAAA,wDAAA,KAAAJ,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,KAAA,AAAAK,eAAA,AAAA,oDAAAN,6BAAA,KAAA,IAAA,OAAA,IAAA,OAAA,2DAAA;;;AAAA,AAAAO,gBAAAP;gBAAA,IAAAQ,yBAAA2H;AAAA,AAAA,AAAA9H,oBAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,KAAA,KAAA,uDAAA,KAAA,KAAA,AAAA,kYAAA,KAAAG,uBAAA;UAAA,AAAA,AAAAZ;;AAAA;UAAA,AAAA,AAAAkB,mCAAA,mFAAA,sFAAAC;WAAA,AAAA,AAAAD,mCAAA,mFAAA,sFAAAC;WAAA,AAAA,AAAAD,mCAAA,mFAAA,sFAAAC;;;AAAA,CAAA,AAAA6G,4EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,kFAAA;;AAAA,CAAA,AAAAA,qFAAA;;AAAA,CAAA,AAAAA,0FAAA,WAAA5G,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;AAAAmH,wEAAA,8HAAAN;AAAA,AAAA,YAAAF,iEAAAE;;;AAAAF;;AAAA,YAAAA,iEAAA;;;AAAA,GAAAvG;AAAA,AAAA,AAAAC,oBAAA,AAAAC,+BAAA,+GAAA,AAAA,8LAAA,2CAAA,6DAAA,AAAA,iDAAA,sDAAA,AAAA,oCAAA,gDAAA,AAAA,8OAAA,mDAAA,AAAA,KAAA,oDAAA,AAAA,IAAA,yDAAA,AAAA,EAAA,qDAAA,AAAA,wIAAA,oDAAA,kBAAAmG,0EAAA,AAAA,AAAAA,wFAAA,eAAAA;;AAAA;AAYA,AAAKc,0CAAW,CAAA,WAAA;AAEhB,8CAAA,9CAAmBC,oGAAgBC;AAAnC,AAAA;AAEE,OAAArE,gDAAA,mCAAA,wEAAAsE;AAAA,AAAA,IAAA,AAAA,IAAAC,mBAAA,CAAAD,cAAA;AAAA,AAAA,IAAAE,mBAYmBnK;IAZnBoK,mBAAAF;IAAAG,mBAYkB,iBAAA6F,WAAA9F;IAAA+F,eAAAhG;AAAA,AAAA,QAAAgG,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAZlB,AAAA,AAAA,CAAAjG,cAAA,OAAAK;;AAAA,CAAAL,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAI;;AAAAJ;gBAAA,IAAAM,oBAAAC;AAAA,AAAA,AAAA,CAAAP,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;sBAAA,wEAAAN;AAAA,AAAA,IAAA,AAAA,AAAA,AAAA,IAAAQ,kBAAA,AAAAC;IAAAC,kBAAAF;IAAAG,kBAGU,OAAAD;IAHVE,kBAAA;AAAA,AAAA,GAAAD;AAAA,AAAA,CAAAX,cAAA,OAAAa;;AAAA,CAAAb,cAAA,OAAAQ;;AAAAR;;AAAA,AAAA,CAAAA,cAAA,OAAAc;;AAAA,CAAAd,cAAA,OAAAQ;;AAAA,CAAAR,cAAA,OAAAY;;AAAAZ;;gBAAA,IAAAM,oBAAAS;AAAA,AAAA,AAAA,CAAAf,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;sBAAA,wEAAAN;AAAA,AAAA,IAAA,AAAA,AAAA,AAAA,IAAAgB,kBACenL;IADfoL,kBAAA,oBAAA,iCAAA,2CAAA,oDAAAC;IAAAC,kBACc,iBAAAsD,WAAAxD;IAAAyD,eAAA1D;AAAA,AAAA,QAAA0D,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AADd,AAAA,AAAA,CAAAzE,cAAA,OAAAoB;;AAAA,CAAApB,cAAA,OAAAmB;;AAAAnB;gBAAA,IAAAM,oBAAAe;AAAA,AAAA,AAAA,CAAArB,cAAA,OAAA;;AAAA,MAAAM;;sBAAA,wEAAAN;AAAA,AAAA,IAAA,AAAA,IAAAQ,kBAAA,CAAAR,cAAA;IAAAmB,kBAAA,CAAAnB,cAAA;AAAA,AAAA,IAAAsB,mBAIgBwD;IAJhBvD,mBAAAJ;IAAAK,mBAI4B/C;IAJ5BgD,mBAAAjB;IAAAkB,mBAI2B,iBAAAqD,WAAAtD;IAAAuD,eAAAxD;AAAA,AAAA,QAAAwD,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IAJ3BpD,mBAIe,iBAAAgD,WAAApD;IAAAqD,WAAAlD;IAAAmD,eAAAvD;AAAA,AAAA,QAAAuD,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;AAJf,AAAA,AAAA,CAAA5E,cAAA,OAAAoB;;AAAA,CAAApB,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA2B;;AAAA3B;gBAAA,IAAAM,oBAAAsB;AAAA,AAAA,AAAA,CAAA5B,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;sBAAA,wEAAAN;AAAA,AAAA,IAAA,AAAA,IAAA6B,kBAAA,CAAA7B,cAAA;IAAA8B,mBAAA,CAAA9B,cAAA;IAAA+B,mBAAA,CAAA/B,cAAA;IAAAgC,kBAAA,CAAAhC,cAAA;AAAA,AAAA,IAAAiC,mBAMU,iBAAAkD,WAAArD;IAAAsD,WAAArD;IAAAsD,eAAAxD;AAAA,AAAA,QAAAwD,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;IANVlD,mBAKQ,iBAAA+C,WAAAhD;IAAAiD,eAAAlD;AAAA,AAAA,QAAAkD,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AALR,AAAA,AAAA,CAAAjF,cAAA,OAAAmC;;AAAA,CAAAnC,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAkC;;AAAAlC;gBAAA,IAAAM,oBAAA8B;AAAA,AAAA,AAAA,CAAApC,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;sBAAA,wEAAAN;AAAA,AAAA,IAAA,AAAA,IAAAQ,kBAAA,CAAAR,cAAA;IAAAmB,kBAAA,CAAAnB,cAAA;AAAA,AAAA,IAAAgC,kBAKSjM;IALT8L,kBAMWiD;IANXhD,mBAAAX;IAAAkB,mBAAA7B;IAAA8B,mBAQ4BzM;IAR5B0M,mBAAA,oBAAA,iCAAA,2CAAA,oDAAArB;IAAAsB,mBAQ2B,iBAAA8C,WAAA/C;IAAAgD,eAAAjD;AAAA,AAAA,QAAAiD,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAR3B,AAAA,AAAA,CAAAtF,cAAA,OAAAyC;;AAAA,CAAAzC,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAgC;;AAAA,CAAAhC,cAAA,OAAA6B;;AAAA,CAAA7B,cAAA,OAAA8B;;AAAA,CAAA9B,cAAA,OAAAqC;;AAAA,CAAArC,cAAA,OAAAwC;;AAAAxC;gBAAA,IAAAM,oBAAAoC;AAAA,AAAA,AAAA,CAAA1C,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;sBAAA,wEAAAN;AAAA,AAAA,IAAA,AAAA,AAAA,AAAA,IAAA2C,mBAa8B5C;AAb9B,AAAA,AAAA,CAAAC,cAAA,OAAA4C;;AAAA,OAAAC,qBAAAF;gBAAA,IAAArC,oBAAAwC;AAAA,AAAA,AAAA,CAAA9C,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;sBAAA,wEAAAN;AAAA,AAAA,IAAA,AAAA,AAAA,AAAA,IAAA+C,kBAEiBhD;AAFjB,AAAA,AAAA,CAAAC,cAAA,OAAAgD;;AAAA,OAAAH,qBAAAE;gBAAA,IAAAzC,oBAAA2C;AAAA,AAAA,AAAA,CAAAjD,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;sBAAA,wEAAAN;AAAA,AAAA,IAAA,AAAA,IAAAqC,mBAAA,CAAArC,cAAA;IAAAwC,mBAAA,CAAAxC,cAAA;AAAA,AAAA,IAAAkD,mBAS6B5G;IAT7B6G,mBAAAd;IAAAe,mBAS4B,iBAAAoC,WAAArC;IAAAsC,eAAAvC;AAAA,AAAA,QAAAuC,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IAT5BnC,mBAU6ByC;IAV7BxC,mBAUoCwB;IAVpCvB,mBAAAf;IAAAgB,mBAAAJ;IAAAnD,mBAU4B,iBAAAyF,WAAApC;IAAAqC,WAAApC;IAAAqC,WAAApC;IAAAqC,eAAAxC;AAAA,AAAA,QAAAwC,6CAAAA,2CAAAH,SAAAC,SAAAC,YAAAC,uBAAAH,SAAAC,SAAAC;;IAV5BnC,mBAWwBxO;IAXxByO,mBAAAN;IAAAO,mBAWuB,iBAAAoC,WAAArC;IAAAsC,eAAAvC;AAAA,AAAA,QAAAuC,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IAXvBnC,mBAWkC/D;IAXlCgE,mBAWoB,CAAAF,mBAAAC;IAXpB7B,mBAAA;AAAA,AAAA,GAAA8B;AAAA,AAAA,CAAA7D,cAAA,OAAA8D;;AAAA,CAAA9D,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAC;;AAAA,CAAAD,cAAA,OAAA+B;;AAAA/B;;AAAA,AAAA,CAAAA,cAAA,OAAA+D;;AAAA,CAAA/D,cAAA,OAAAC;;AAAAD;;gBAAA,IAAAM,oBAAA0D;AAAA,AAAA,AAAA,CAAAhE,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;sBAAA,wEAAAN;AAAA,AAAA,IAAA,AAAA,IAAAC,mBAAA,CAAAD,cAAA;AAAA,AAAA,IAAAiE,mBAAA,AAAAxD;IAAAyD,mBAAAjE;AAAA,AAAA,AAAA,CAAAD,cAAA,OAAAyC;;AAAA,CAAAzC,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAiE;;AAAA,CAAAjE,cAAA,OAAAkE;;AAAAlE;gBAAA,IAAAM,oBAAA6D;AAAA,AAAA,AAAA,CAAAnE,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;uBAAA,yEAAAN;AAAA,AAAA,IAAA,AAAA,IAAAY,kBAAA,CAAAZ,cAAA;AAAA,AAAA,AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAAY;gBAAA,IAAAN,oBAAA8D;AAAA,AAAA,AAAA,CAAApE,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAM;;AAAA,AAAA,OAAA+D,0BAAA,iBAAAC,WAAA,AAAA3P,qDAAA;AAAA,AAAA,CAAA2P,SAAA,OAAAC;;AAAAD;;KAAAE;;AAgBF;;;;;8CAAA,9CAAmB4B,oGAIhBC;AAJH,AAAA,kBAAAF;AAAA,AAKG,OAAAzK,gDAAA,oCAAA,yEAAA4K;AAAA,AAAA,IAAA,AAAA,IAAAC,kBAAA,CAAAD,cAAA;AAAA,AAAA,AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAAC;gBAAA,IAAAC,oBAAAC;AAAA,AAAA,AAAA,CAAAH,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;uBAAA,yEAAAF;AAAA,AAAA,IAAA,AAAA,IAAAI,mBAAA,CAAAJ,cAAA;AAAA,AAAA,IAAAK,mBAAA,AAAAlG;IAAAmG,mBAYoB6I;IAZpB5I,mBAAAH;IAAAI,mBAY8BjH;IAZ9BkH,mBAYmB,iBAAA2I,WAAA7I;IAAA8I,WAAA7I;IAAA8I,eAAAhJ;AAAA,AAAA,QAAAgJ,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;AAZnB,AAAA,AAAA,CAAArJ,cAAA,OAAAU;;AAAA,CAAAV,cAAA,OAAAS;;AAAAT;gBAAA,IAAAE,oBAAAS;AAAA,AAAA,AAAA,CAAAX,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;sBAAA,wEAAAF;AAAA,AAAA,IAAA,AAAA,IAAAY,mBAAA,CAAAZ,cAAA;IAAAa,mBAAA,CAAAb,cAAA;AAAA,AAAA,IAAAc,mBAAA,kBAAAD,kBAAA,kBAAAD,qBAAAA;IAAAG,mBAIchB;IAJdiB,mBAAAF;IAAAG,mBAIa,iBAAA4G,WAAA7G;IAAA8G,eAAA/G;AAAA,AAAA,QAAA+G,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAJb,AAAA,AAAA,CAAA7H,cAAA,OAAAkB;;AAAA,CAAAlB,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,OAAAzD,qBAAA0E;gBAAA,IAAAf,oBAAAiB;AAAA,AAAA,AAAA,CAAAnB,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;sBAAA,wEAAAF;AAAA,AAAA,IAAA,AAAA,IAAAoB,kBAAA,CAAApB,cAAA;AAAA,AAAA,IAAAqB,kBAAAD;IAAAE,kBAAAD;IAAAE,kBAAA;IAAAC,kBAEI,CAAAF,mBAAAC;IAFJtB,kBAAA;AAAA,AAAA,GAAAuB;AAAA,AAAA,CAAAxB,cAAA,OAAAyB;;AAAA,CAAAzB,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAC;;AAAAD;;AAAA,AAAA,CAAAA,cAAA,OAAA0B;;AAAA,CAAA1B,cAAA,OAAAqB;;AAAArB;;gBAAA,IAAAE,oBAAAyB;AAAA,AAAA,AAAA,CAAA3B,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;sBAAA,wEAAAF;AAAA,AAAA,IAAA,AAAA,IAAAI,mBAAA,CAAAJ,cAAA;AAAA,AAAA,IAAA4B,mBAUiBjT;IAVjBkT,mBAAAzB;IAAA0B,mBAUgB,iBAAA2G,WAAA5G;IAAA6G,eAAA9G;AAAA,AAAA,QAAA8G,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IAVhB1G,mBAU2BxI;IAV3ByI,mBAUY,CAAAF,oBAAAC;IAVZE,mBAAA;AAAA,AAAA,GAAAD;AAAA,AAAA,CAAAhC,cAAA,OAAAkC;;AAAAlC;;AAAA,AAAA,CAAAA,cAAA,OAAAmC;;AAAA,CAAAnC,cAAA,OAAAiC;;AAAAjC;;gBAAA,IAAAE,oBAAAkC;AAAA,AAAA,AAAA,CAAApC,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;sBAAA,wEAAAF;AAAA,AAAA,IAAA,AAAA,IAAAY,mBAAA,CAAAZ,cAAA;IAAAqC,mBAAA,CAAArC,cAAA;AAAA,AAAA,IAAAsC,mBAAA1B;IAAA2B,mBAO2B8F;IAP3B7F,mBAAA;IAAAC,mBAAA;IAAAC,mBAAAL;IAAAM,mBAAA,oBAAA,gDAAAF,iBAAAC,mBAAA,2CAAA,oDAAAE;IAAAC,mBAAAP;IAAAQ,mBAO0B,iBAAAmF,WAAAzF;IAAA0F,WAAAvF;IAAAwF,WAAAtF;IAAAuF,eAAA7F;AAAA,AAAA,QAAA6F,6CAAAA,2CAAAH,SAAAC,SAAAC,YAAAC,uBAAAH,SAAAC,SAAAC;;IAP1BpF,mBAOmB,kBAAAD;AAPnB,AAAA,AAAA,CAAA9C,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA;gBAAA,IAAAE,oBAAA8C;AAAA,AAAA,AAAA,CAAAhD,cAAA,OAAAiD;;AAAA,CAAAjD,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAE;;AAAA,CAAAF,cAAA,OAAA;;AAAAA;;sBAAA,wEAAAA;AAAA,AAAA,IAAA,AAAA,IAAAqB,kBAAA,CAAArB,cAAA;AAAA,AAAA,IAAAkD,mBAAA7B;IAAA8B,mBAAA/O;IAAAgP,mBAAAF;IAAAG,mBAEI,iBAAA+D,WAAAhE;IAAAiE,eAAAlE;AAAA,AAAA,QAAAkE,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IAFJ9D,mBAAAhS;IAAAiS,mBAAAF;IAAAG,mBAEI,iBAAA8D,WAAA/D;IAAAgE,eAAAjE;AAAA,AAAA,QAAAiE,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IAFJ7D,mBAAAnP;IAAAoP,mBAAAL;IAAAM,mBAEI,iBAAA6D,WAAA9D;IAAA+D,eAAAhE;AAAA,AAAA,QAAAgE,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IAFJnF,mBAAAmB;IAAAI,mBAAAD;IAAAE,mBAGoCvL;IAHpCwL,mBAAA;IAAAC,mBAAA1B;IAAA2B,mBAGU,iBAAA0D,WAAA5D;IAAA6D,WAAA5D;IAAA6D,eAAA/D;AAAA,AAAA,QAAA+D,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;IAHV/G,mBAAA;IAAAC,mBAAA;AAAA,AAAA,AAAA,CAAAb,cAAA,OAAAiE;;AAAA,CAAAjE,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAY;;AAAA,CAAAZ,cAAA,OAAA4D;;AAAA,CAAA5D,cAAA,OAAAqC;;AAAA,CAAArC,cAAA,OAAAa;;AAAAb;gBAAA,IAAAE,oBAAAgE;AAAA,AAAA,AAAA,CAAAlE,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;sBAAA,wEAAAF;AAAA,AAAA,IAAA,AAAA,AAAA,AAAA,IAAAmE,mBASiBqE;IATjBpE,mBAAAvE;IAAAO,mBASgB,iBAAAkI,WAAAlE;IAAAmE,eAAApE;AAAA,AAAA,QAAAoE,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAThB,AAAA,AAAA,CAAAtI,cAAA,OAAAU;;AAAA,CAAAV,cAAA,OAAAI;;AAAAJ;gBAAA,IAAAE,oBAAAmE;AAAA,AAAA,AAAA,CAAArE,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;sBAAA,wEAAAF;AAAA,AAAA,IAAA,AAAA,IAAAqC,mBAAA,CAAArC,cAAA;AAAA,AAAA,IAAAsE,mBAKqB9M;IALrB+M,mBAAAlC;IAAAmC,mBAKoB,iBAAAuD,WAAAxD;IAAAyD,eAAA1D;AAAA,AAAA,QAAA0D,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AALpB,AAAA,AAAA,CAAA/H,cAAA,OAAAiD;;AAAA,CAAAjD,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAwE;;AAAAxE;gBAAA,IAAAE,oBAAAuE;AAAA,AAAA,AAAA,CAAAzE,cAAA,OAAA0E;;AAAA,CAAA1E,cAAA,OAAAE;;AAAAF;;sBAAA,wEAAAA;AAAA,AAAA,IAAA,AAAA,IAAAI,mBAAA,CAAAJ,cAAA;AAAA,AAAA,IAAA2E,mBAauBjP;IAbvBkP,mBAAAxE;IAAAyE,mBAasB,iBAAA4E,WAAA7E;IAAA8E,eAAA/E;AAAA,AAAA,QAAA+E,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IAbtB3E,mBAagB/E;IAbhBgF,mBAAAF;IAAAG,mBAae,iBAAAuE,WAAAxE;IAAAyE,eAAA1E;AAAA,AAAA,QAAA0E,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAbf,AAAA,AAAA,CAAAvJ,cAAA,OAAAiF;;AAAA,CAAAjF,cAAA,OAAA;;AAAA,OAAAzD,qBAAAyI;gBAAA,IAAA9E,oBAAAgF;AAAA,AAAA,AAAA,CAAAlF,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;uBAAA,yEAAAF;AAAA,AAAA,IAAA,AAAA,IAAAiC,mBAAA,CAAAjC,cAAA;AAAA,AAAA,AAAA,CAAAA,cAAA,OAAAmF;;AAAA,CAAAnF,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAAiC;;AAAAjC;gBAAA,IAAAE,oBAAAkF;AAAA,AAAA,AAAA,CAAApF,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;sBAAA,wEAAAF;AAAA,AAAA,IAAA,AAAA,AAAA,AAAA,IAAAqF,kBACajR;IADbkR,kBACkB6B;IADlB5B,kBAAA1F;IAAA2F,kBACiB,iBAAAyB,WAAA1B;IAAA2B,eAAA5B;AAAA,AAAA,QAAA4B,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IADjB7F,kBACY,iBAAA2F,WAAAvB;IAAAwB,eAAA3B;AAAA,AAAA,QAAA2B,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AADZ,AAAA,AAAA,CAAA/G,cAAA,OAAAyF;;AAAA,CAAAzF,cAAA,OAAAoB;;AAAApB;gBAAA,IAAAE,oBAAAwF;AAAA,AAAA,AAAA,CAAA1F,cAAA,OAAA;;AAAA,MAAAE;;uBAAA,yEAAAF;AAAA,AAAA,IAAA,AAAA,AAAA,AAAA,IAAA2F,mBAAA,AAAAxL;AAAA,AAAA,AAAA,CAAA6F,cAAA,OAAA4F;;AAAA,CAAA5F,cAAA,OAAA2F;;AAAA3F;gBAAA,IAAAE,oBAAA2F;AAAA,AAAA,AAAA,CAAA7F,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;sBAAA,wEAAAF;AAAA,AAAA,IAAA,AAAA,IAAA4D,mBAAA,CAAA5D,cAAA;AAAA,AAAA,IAAA8F,mBAAA,AAAA3L;IAAA4L,mBAAAnC;AAAA,AAAA,AAAA,CAAA5D,cAAA,OAAAyF;;AAAA,CAAAzF,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA+F;;AAAA/F;gBAAA,IAAAE,oBAAA8F;AAAA,AAAA,AAAA,CAAAhG,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;uBAAA,yEAAAF;AAAA,AAAA,IAAA,AAAA,IAAAI,mBAAA,CAAAJ,cAAA;AAAA,AAAA,IAAAiG,mBAW2BvQ;IAX3BwQ,mBAW2CiD;IAX3ChD,mBAAA/F;IAAAgG,mBAAA;IAAAC,mBAWuD9M;IAXvD+M,mBAW0C,iBAAAyC,WAAA5C;IAAA6C,WAAA5C;IAAA6C,WAAA5C;IAAA6C,eAAAhD;AAAA,AAAA,QAAAgD,6CAAAA,2CAAAH,SAAAC,SAAAC,YAAAC,uBAAAH,SAAAC,SAAAC;;IAX1C1C,mBAW0B,iBAAAsC,WAAAvC;IAAAwC,eAAA7C;AAAA,AAAA,QAAA6C,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IAX1BrC,mBAWoBzG;IAXpB0G,mBAAAF;IAAAG,mBAWmB,iBAAAiC,WAAAlC;IAAAmC,eAAApC;AAAA,AAAA,QAAAoC,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAXnB,AAAA,AAAA,CAAA3I,cAAA,OAAA2G;;AAAA,OAAApK,qBAAAmK;gBAAA,IAAAxG,oBAAA0G;AAAA,AAAA,AAAA,CAAA5G,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,CAAAA,cAAA,OAAA;;AAAA,MAAAE;;AAAA,AAAA,OAAAnC,0BAAA,iBAAA8I,WAAA,AAAAxY,qDAAA;AAAA,AAAA,CAAAwY,SAAA,OAAAC;;AAAAD;;KAAA3I;;;AAeH;;;uCAAA,vCAAmByL,sFAEhBnT;AAFH,AAGE,IAAM1B,OAAK,iBAAA8U,WAAM,qDAAA,rDAACvb;AAAP,AAAA,CAAAub,SAAA,OAAA;;AAAA,CAAAA,SAAA,OAAA;;AAAAA;;AAAX,AAEE;;;AAAA,AACM,QAACpT,mCAAAA,qCAAAA;;6BACHlB;AAFJ,AAGG,GAAQ,oDAAA,pDAAC1G,qFAAK,MAAA,LAAMkG,6DAAQ,MAAA,LAAMA;AAAlC;AAAA,AAAA,MAAA,KAAAxE,MAAA;;;AACA,QAACkG,mCAAAA,sCAAAA,LAAGlB,kBAAAA;;6BACHA,EAAE5H;AALN,AAMG,GAAI,OAASA;AACX,AAAI,GAAQ,6CAAA,7CAACkB,8EAAK,MAAA,LAAMkG;AAApB;AAAA,AAAA,MAAA,KAAAxE,MAAA;;;AACA,MAAA,LAAMwE,YAAO,AAAC+U,6CAAK,MAAA,LAAM/U,WAAQ,AAACqD,wCAAWzK;;AAAK4H;;AACtD,IAAMK,KAAG,AAACK,4CAAetI;AAAzB,AACE,MAAA,LAAMoH,YAAO,AAACgV,6CAAK,MAAA,LAAMhV,WAAQa;;AACjC,GAAI,CAAG,AAAChH,gBAAMgH,MAAI4D;AAChB,IAAM7L,QAAE,AAACmc,6CAAK,MAAA,LAAM/U,WAAQ,MAAA,LAAMA;AAAlC,AACE,MAAA,OAAA,ZAAMA;;AACN,MAAA,OAAA,ZAAMA;;AACN,QAAC0B,mCAAAA,4CAAAA,XAAGlB,wBAAAA,tBAAE5H,wBAAAA;;AAAI4H;;;;oBAVjBA,EAAE5H;;;;;6BAAF4H;;6BAAAA,EAAE5H;;;;;;;;;;AAYV;;;uCAAA,vCAAmBqc,sFAEhBvT;AAFH,AAGE;;;AAAA,AACM,QAACA,mCAAAA,qCAAAA;;6BACHlB;AAFJ,AAEO,QAACkB,mCAAAA,sCAAAA,LAAGlB,kBAAAA;;6BACPA,EAAE5H;AAHN,AAIG,IAAM4H,QAAE,AAAC0U,+CAAOxT,GAAGlB,EAAE,AAAC2U,0GAAS,AAACC,4CAAI1S,qCAAQ,AAAC2P,cAAIzZ;IAC3C4H,QAAE,AAAC0U,+CAAOxT,GAAGlB,MAAE,AAAC2U,0GAAS,AAACE,sDAAc5Q,yCAAY,AAAC2Q,4CAAIxU,6CAAgB,AAAC8S,eAAK9a;AADrF,AAEE,IAAA0c,WAAM,AAAClb,cAAI,AAACP,gBAAM,AAAC6Z,eAAK9a,IAAI6L;AAA5B,AAAA,QAAA6Q;KAAA;AACI,IAAAC,WAAI/U;IAAJgV,WAAM,4CAAA,5CAAC5U;AAAP,AAAA,4EAAA2U,SAAAC,yBAAAD,SAAAC,/GAAC9T,mCAAAA,sDAAAA;;;;AAA0BlB;;;;oBAJhCA,EAAE5H;;;;;6BAAF4H;;6BAAAA,EAAE5H;;;;;;;;;;AAMR,AAAA,uCAAA,+CAAA6c,tFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAna,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qEAAA,rEAAMma,gFACFnV;AADJ,AACOA;;;AADP,CAAA,qEAAA,rEAAMmV,gFAEFnV,EAAE5H;AAFN,AAES,CAAC4H,kCAAAA,qCAAAA,LAAE5H,iBAAAA;;AAAG4H;;;AAFf,CAAA,+DAAA,/DAAMmV;;AAAN","names":["cljs.core/PROTOCOL_SENTINEL","com.cognitect.transit.types/UUID","hyperfiddle.electric.impl.io/default-write-handler","cognitect.transit.write_handler","x","hyperfiddle.electric.impl.io/-last-unserializable-for-repl","js/console.log","cljs.core.pr_str","cljs.core/type","_","hyperfiddle.electric.impl.io/->cache","size","G__50660","arr50662","cljs.core/identity","cljs.core.object_array","hyperfiddle.electric.impl.io/cache-add","cache","k","v","i","cljs.core/count","cljs.core._EQ_","hyperfiddle.electric.impl.array-fields/get","arr50669","widx","p1__50663#","hyperfiddle.electric.impl.array-fields/getswap","cljs.core/mod","arr50673","hyperfiddle.electric.impl.io/cache-get","hyperfiddle.electric.impl.io/cache->map","ac","cljs.core/transient","cljs.core.assoc_BANG_","cljs.core/persistent!","hyperfiddle.electric.impl.io/generated__hyperfiddle_electric_impl_io_57","js/hyperfiddle","js/hyperfiddle.electric","js/hyperfiddle.electric.impl","js/hyperfiddle.electric.impl.io","js/hyperfiddle.electric.impl.io.t_hyperfiddle$electric$impl$io50879","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io50879","_50881","meta50880","unused__14959__auto__","self__","G__50885","js/Error","args50883","cljs.core/aclone","done-50866","___14619__auto__","RCF__done!","hyperfiddle.rcf/async-notifier","cljs.test.update_current_env_BANG_","cljs.core/conj","values__10703__auto__","cljs.core/List","result__10704__auto__","cljs.core.apply","hyperfiddle.rcf/=","cljs.test/do-report","cljs.core/cons","cljs.core/first","t__10691__auto__","e50889","e50892","e50898","e50902","e50908","cljs.test/update-current-env!","cljs.core/rest","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.electric.impl.io/->t_hyperfiddle$electric$impl$io50879","hyperfiddle.rcf/*enabled*","cljs.test/run-block","cljs.test/test-var-block*","hyperfiddle.electric.impl.io/!c","hyperfiddle.electric.impl.io/!ex-cache","hyperfiddle.electric.impl.io/save-original-ex!","fi","id","hyperfiddle.electric.debug/ex-id","temp__5808__auto__","cause","cljs.core/ex-cause","js/hyperfiddle.electric.FailureInfo","hyperfiddle.electric.impl.io/get-original-ex","hyperfiddle.electric.impl.io/*write-handlers*","hyperfiddle.electric.impl.io/failure-writer","err","js/missionary.Cancelled","js/hyperfiddle.electric.Pending","js/hyperfiddle.electric.Remote","hyperfiddle.electric.debug/serializable","cljs.core/ex-data","cljs.core/ex-message","hyperfiddle.electric.impl.io/write-opts","cljs.core.merge","js/hyperfiddle.electric.Failure","hyperfiddle.electric.impl.io/*read-handlers*","hyperfiddle.electric.impl.io/failure-reader","cognitect.transit/read-handler","p__50914","vec__50915","seq__50916","cljs.core/seq","first__50917","cljs.core/next","tag","args","G__50921","cljs.core/Keyword","vec__50922","cljs.core.nth","message","data","hyperfiddle.electric.debug.ex_info_STAR_","vec__50926","or__5045__auto__","hyperfiddle.electric.impl.io/read-opts","hyperfiddle.electric.impl.io/set-ints","cljs.core.partial","cljs.core/reduce-kv","r","n","offset","G__50929","hyperfiddle.electric.impl.io/encode-numbers","xs","required","G__50931","js/ArrayBuffer","js/DataView","hyperfiddle.electric.impl.io/decode-numbers","b","cljs.core/vec","js/hyperfiddle.electric.impl.io.t_hyperfiddle$electric$impl$io50933","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io50933","_50935","meta50934","hyperfiddle.electric.impl.io/->t_hyperfiddle$electric$impl$io50933","rf","l","G__50936","G__50937","!cache","cljs.core.atom","hyperfiddle.electric.impl.io/transit-writer","cljs.core.swap_BANG_","p__50938","map__50939","cljs.core/--destructure-map","cljs.core.get","write-handlers","writer","cljs.core.assoc","cognitect.transit.writer","hyperfiddle.electric.impl.io/encode","cognitect.transit/write","hyperfiddle.electric.impl.io/transit-reader","p__50940","map__50941","read-handlers","reader","cognitect.transit.reader","hyperfiddle.electric.impl.io/decode","s","cognitect.transit/read","hyperfiddle.electric.impl.io/decode-str","e50942","G__50943","js/console.debug","t","cljs.core.ex_info","hyperfiddle.electric.impl.io/generated__hyperfiddle_electric_impl_io_190","js/hyperfiddle.electric.impl.io.t_hyperfiddle$electric$impl$io50971","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io50971","_50973","meta50972","G__50979","args50975","done-50962","e50984","e50986","hyperfiddle.electric.impl.io/->t_hyperfiddle$electric$impl$io50971","hyperfiddle.electric.impl.io/cause","hyperfiddle.electric.impl.io/ex","hyperfiddle.electric.impl.io/sent","hyperfiddle.electric.impl.io/chunk-size","hyperfiddle.electric.impl.io/message-reader","?read","cr50996-state","cr50996-place-22","cr50996-place-32","cr50996-place-33","cr50996-place-34","cr50996-block-8","cr50996-exception","e51041","cr50996-place-4","missionary.core/unpark","cr50996-place-5","cr50996-place-6","cr50996-place-7","cr50996-block-9","cr50996-block-3","e51052","cr50996-place-0","cr50996-place-1","cljs.core/IVector","cr50996-place-2","cr50996-block-1","e51054","cr50996-place-37","cr50996-place-38","cr50996-place-39","cr50996-place-40","cr50996-place-41","cr50996-place-42","e51060","cr50996-place-9","cr50996-place-10","cr50996-place-28","cr50996-place-8","cr50996-place-35","cr50996-place-36","cr50996-block-10","e51071","cr50996-place-11","cr50996-place-12","cr50996-place-13","cr50996-place-14","cr50996-block-4","e51083","cr50996-place-29","cr50996-block-6","missionary.core/park","e51089","cr50996-place-3","cr50996-block-2","e51091","cr50996-place-15","cr50996-place-16","cr50996-place-17","cr50996-place-18","cr50996-place-19","cr50996-place-20","cr50996-place-21","cr50996-place-23","cr50996-place-24","cr50996-place-25","cr50996-place-26","cr50996-place-27","cr50996-block-7","cr50996-block-5","e51092","cr50996-place-30","cr50996-place-31","e51104","e51108","cloroutine.impl/coroutine","G__51112","cr50996-block-0","missionary.core/sp-run","G__51058","fexpr__51057","G__51067","G__51068","fexpr__51066","cljs.core/conj!","G__51064","fexpr__51063","G__51079","fexpr__51078","G__51076","G__51077","fexpr__51075","G__51086","fexpr__51085","G__51094","fexpr__51093","G__51096","G__51097","G__51098","fexpr__51095","cljs.core/reduce","G__51101","fexpr__51100","G__51047","fexpr__51046","p1__51113#","hyperfiddle.electric.impl.io/message-writer","write","cr51115-state","cr51115-place-9","cr51115-exception","e51229","cr51115-place-48","cr51115-place-72","cr51115-place-73","cr51115-place-74","cr51115-place-75","cr51115-place-76","cr51115-block-8","e51233","cr51115-place-26","cr51115-place-27","cr51115-place-40","cr51115-place-41","cr51115-place-42","cr51115-place-43","cr51115-block-6","e51238","cr51115-place-4","cr51115-place-5","cr51115-place-6","cr51115-place-7","cr51115-place-8","cr51115-block-7","cr51115-block-2","e51241","cr51115-place-49","cr51115-place-50","cr51115-place-51","cr51115-place-52","cr51115-place-53","cr51115-place-54","cr51115-block-11","cr51115-block-9","e51242","cr51115-place-20","cr51115-place-31","cr51115-place-32","cr51115-place-33","cr51115-place-34","cr51115-place-35","cr51115-place-36","cljs.core/IMap","cr51115-place-37","cr51115-place-38","cr51115-place-39","e51245","cr51115-block-5","cr51115-place-10","cr51115-place-11","cr51115-place-12","cr51115-place-13","cr51115-place-14","cr51115-place-15","cr51115-place-16","cr51115-place-17","cr51115-place-18","cr51115-place-19","cr51115-place-21","cr51115-place-22","cr51115-place-23","cr51115-place-24","cr51115-place-25","cr51115-block-3","e51250","cr51115-place-46","cr51115-place-47","e51260","cr51115-place-28","cr51115-place-29","cr51115-place-30","e51263","cr51115-block-4","cr51115-place-55","cr51115-place-56","cr51115-place-57","cr51115-place-58","cr51115-place-59","cr51115-place-60","cr51115-block-10","e51266","cr51115-block-14","e51271","cr51115-place-0","cr51115-place-1","cr51115-place-2","cr51115-place-3","cr51115-block-1","e51272","cr51115-place-61","cr51115-block-13","e51277","cr51115-place-44","cr51115-place-45","e51278","cr51115-place-62","cr51115-place-63","cr51115-place-64","cr51115-place-65","cr51115-place-66","cr51115-place-67","cr51115-place-68","cr51115-place-69","cr51115-place-70","cr51115-place-71","cr51115-block-12","e51279","G__51288","cr51115-block-0","G__51276","fexpr__51275","G__51274","fexpr__51273","cljs.core/pop","G__51252","fexpr__51251","G__51254","fexpr__51253","G__51256","fexpr__51255","G__51258","G__51259","fexpr__51257","G__51240","fexpr__51239","G__51265","fexpr__51264","G__51247","G__51248","G__51249","fexpr__51246","cljs.core/ex-info","G__51262","fexpr__51261","cljs.core/peek","G__51244","fexpr__51243","G__51287","fexpr__51286","G__51285","fexpr__51284","G__51281","G__51282","G__51283","fexpr__51280","cljs.core/subvec","G__51236","G__51237","fexpr__51235","G__51270","fexpr__51269","G__51268","fexpr__51267","hyperfiddle.electric.impl.io/decoder","G__51289","cljs.core.conj","cljs.core.into","hyperfiddle.electric.impl.io/encoder","cljs.core.reduce","cljs.core.eduction","cljs.core.map","cljs.core.partition_all","G__51290","G__51291","G__51292","var_args","G__51294","hyperfiddle.electric.impl.io/foreach"],"sourcesContent":[";; Facilities for encoding/decoding of Electric protocol messages.\n;; * Data frames can be arbitrary clojure data or Electric failures. Serialization is done via transit json, the failure\n;; error is preserved if it's an instance of `hyperfiddle.electric.Pending` or `hyperfiddle.electric.Cancelled`, otherwise\n;; the error is logged and turned into an instance of `hyperfiddle.electric.Remote`.\n;; * Control frames are vectors of signed integers. Serialization is the concatenation of the binary representation of\n;; these numbers as fixed-length 32-bit, big endian.\n\n(ns ^:no-doc hyperfiddle.electric.impl.io\n  (:require [missionary.core :as m]\n            [cognitect.transit :as t]\n            #?(:clj [clojure.tools.logging :as log])\n            [hyperfiddle.electric.debug :as dbg]\n            [hyperfiddle.rcf :as rcf :refer [tests with tap %]]\n            #?(:cljs [com.cognitect.transit.types])\n            [hyperfiddle.electric.impl.array-fields :as a])\n  (:import (missionary Cancelled)\n           (hyperfiddle.electric Failure Pending Remote FailureInfo)\n           #?(:clj (java.nio ByteBuffer))\n           #?(:clj (java.io ByteArrayInputStream ByteArrayOutputStream))\n           #?(:clj (clojure.lang IReduceInit))))\n\n#?(:cljs (extend-type com.cognitect.transit.types/UUID IUUID)) ; https://github.com/hyperfiddle/hyperfiddle/issues/728\n\n(def default-write-handler ; Intercepts unserializable values, logs and return nil\n  (t/write-handler ; Adapted from `com.cognitect.transit.impl.WriteHandlers.NullWriteHandler`\n    (fn [x]\n      (def -last-unserializable-for-repl x)\n      (#?(:clj log/info, :cljs js/console.log) \"Unserializable reference transfer:\" (pr-str (type x)) (str x))\n      \"_\")\n    (fn [x] nil)\n    (fn [_] \"\")))\n\n(defn ->cache \"Builds a minimal, cljc map/bounded-queue cache.\n  One slot per key (map).\n  Reaching `size` pops oldest value (bounded-queue).\" [size]\n  (doto (object-array (inc (* size 2))) (a/set (* size 2) 0)))\n(defn cache-add [cache k v]\n  (when-not (loop [i 0]\n              (when (< i (dec (count cache)))\n                (if (= k (a/get cache i))\n                  (do (a/set cache (inc i) v) true)\n                  (recur (+ i 2)))))\n    (let [widx (a/getswap cache (dec (count cache)) #(mod (+ % 2) (dec (count cache))))]\n      (a/set cache widx k, (inc widx) v))))\n(defn cache-get [cache k]\n  (loop [i 0]\n    (when (< i (dec (count cache)))\n      (if (= k (a/get cache i))\n        (a/get cache (inc i))\n        (recur (+ i 2))))))\n(defn cache->map [cache]\n  (loop [i 0, ac (transient {})]\n    (if (< i (dec (count cache)))\n      (recur (+ i 2) (assoc! ac (a/get cache i) (a/get cache (inc i))))\n      (persistent! ac))))\n\n(tests \"keyed cache\"\n  (def !c (->cache 1))\n  (cache-add !c 1 2) (cache-get !c 1) := 2\n  (cache-add !c 1 3) (cache-get !c 1) := 3\n  (cache-add !c 2 4) (cache-get !c 2) := 4\n  (cache->map !c) := {2 4}\n\n  \"size 2\"\n  (def !c (->cache 2))\n  (cache-add !c 1 1)\n  (cache-add !c 2 2)\n  (cache-add !c 2 2)\n  (cache->map !c) := {1 1, 2 2})\n\n(def !ex-cache (->cache 16))\n(defn save-original-ex! [fi]\n  (let [id (dbg/ex-id fi)]\n    (when-some [cause (ex-cause fi)]\n      (when-not (instance? FailureInfo cause)\n        (cache-add !ex-cache id cause)))\n    id))\n(defn get-original-ex [id] (cache-get !ex-cache id))\n\n(def ^:dynamic *write-handlers* nil)\n\n(def failure-writer (t/write-handler\n                      (fn [_] \"failure\")\n                      (fn [x]\n                        (let [err (.-error ^Failure x)]\n                          (cond (instance? Cancelled err) [:cancelled]\n                                (instance? Pending err)   [:pending]\n                                (instance? Remote err)    [:remote (dbg/serializable (ex-data err))]\n                                :else                     [:exception (ex-message err) (dbg/serializable (ex-data err))\n                                                           (save-original-ex! err)])))))\n\n(defn write-opts []\n  {:handlers (merge *write-handlers*\n               {Failure failure-writer\n                :default default-write-handler}) ; cljs\n   :default-handler default-write-handler}) ; clj\n\n(def ^:dynamic *read-handlers* nil)\n\n(def failure-reader (t/read-handler\n                      (fn [[tag & args]]\n                        (case tag\n                          :exception (let [[message data id] args]\n                                       (Failure. (dbg/ex-info* message data id nil)))\n                          :remote    (let [[data] args]\n                                       (Failure. (dbg/ex-info* \"Remote error\" (or data {}))))\n                          :pending   (Failure. (Pending.))\n                          :cancelled (Failure. (Cancelled.))))))\n\n(defn read-opts [] {:handlers (merge *read-handlers* {\"failure\" failure-reader})})\n\n(def set-ints\n  (partial reduce-kv\n    (fn [r i n]\n      (let [offset (bit-shift-left i 2)]\n        #?(:clj  (.putInt ^ByteBuffer r offset n)\n           :cljs (doto r (.setInt32 offset n)))))))\n\n(defn encode-numbers\n  \"Encode a control frame to a binary segment.\"\n  [xs]\n  (let [required (bit-shift-left (count xs) 2)] ; size of bytebuffer is 4 \u00d7 (count xs), so shift by 2\n    #?(:clj (set-ints (ByteBuffer/allocate required) xs)\n       :cljs (doto (js/ArrayBuffer. required)\n               (-> (js/DataView.) (set-ints xs))))))\n\n(defn decode-numbers\n  \"Decode a control frame from a binary segment.\"\n  [b]\n  (vec\n    (reify\n      #?(:clj IReduceInit :cljs IReduce)\n      #?(:clj (reduce [_ rf r]\n                (let [l (.limit ^ByteBuffer b)]\n                  (loop [r r, i (int 0)]\n                    (if (< i l)\n                      (recur (rf r (.getInt ^ByteBuffer b i))\n                        (unchecked-add-int i 4)) r))))\n         :cljs (-reduce [_ rf r]\n                 (let [l (.-byteLength b)\n                       v (js/DataView. b)]\n                   (loop [r r, i 0]\n                     (if (< i l)\n                       (recur (rf r (.getInt32 v i))\n                         (+ i 4)) r))))))))\n\n\n;; #?(:cljs (def transit-writer (t/writer :json (write-opts))))\n#?(:cljs (let [!cache (atom {:write-handlers *write-handlers*, :writer nil})]\n           (defn transit-writer []\n             (:writer (swap! !cache (fn [{:keys [write-handlers writer] :as cache}]\n                                      (if (= write-handlers *write-handlers*)\n                                        (if writer\n                                          cache\n                                          (assoc cache :writer (t/writer :json (write-opts))))\n                                        {:write-handlers *write-handlers*\n                                         :writer         (t/writer :json (write-opts))})))))))\n\n(defn encode\n  \"Encode a data frame to transit json\"\n  [x]\n  #?(:clj (let [out (ByteArrayOutputStream.)]\n            (t/write (t/writer out :json (write-opts)) x)\n            (.toString out))\n     :cljs (t/write (transit-writer) x)))\n\n;; #?(:cljs (def transit-reader (t/reader :json (read-opts))))\n#?(:cljs (let [!cache (atom {:read-handlers *read-handlers*, :reader nil})]\n           (defn transit-reader []\n             (:reader (swap! !cache (fn [{:keys [read-handlers reader] :as cache}]\n                                      (if (= read-handlers *read-handlers*)\n                                        (if reader\n                                          cache\n                                          (assoc cache :reader (t/reader :json (read-opts))))\n                                        {:read-handlers *read-handlers*\n                                         :reader        (t/reader :json (read-opts))})))))))\n\n\n(defn decode\n  \"Decode a data frame from transit json\"\n  [^String s]\n  #?(:clj (t/read (t/reader (ByteArrayInputStream. (.getBytes s \"UTF-8\")) :json (read-opts)))\n     :cljs (t/read (transit-reader) s)))\n\n(defn decode-str [x]\n  (try (doto (decode x) (->> (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3d\")))\n    (catch #?(:clj Throwable :cljs :default) t\n      (throw (ex-info \"Failed to decode\" {:value x} t)))))\n\n(tests \"FailureInfo\"\n  (def cause (ex-info \"boom\" {}))\n  (def ex (dbg/ex-info* \"x\" {} cause))\n  (def sent (-> ex Failure. encode decode .-error))\n  \"keeps the ID across the wire\"\n  (dbg/ex-id ex) := (dbg/ex-id sent)\n  \"can restore cause\"\n  (get-original-ex (dbg/ex-id sent)) := cause\n  nil)\n\n; Jetty rejects websocket payloads larger than 65536 bytes by default\n; We\u2019ll chop messages if needed\n(def chunk-size (bit-shift-right 65536 2))\n\n(defn ^:deprecated message-reader [?read]\n  \"Returns a discrete flow of read Electric messages from provided task, emitting individual frames.\"\n  (m/sp\n    (loop [data (transient [])]\n      (let [x (m/? ?read)]\n        (if (string? x)\n          (recur (conj! data (decode-str x)))\n          (persistent!\n            (conj! data\n              (loop [x       x\n                     control (transient [])]\n                (let [xs      (decode-numbers x)\n                      control (reduce conj! control xs)]\n                  (if (< (count xs) chunk-size) ; final frame\n                    (persistent! control)\n                    (recur (m/? ?read) control)))))))))))\n\n\n(defn ^:deprecated message-writer\n  \"Returns a function taking an Electric message and returning a task writing it as individual frames using provided\n   function. Might cut a message into chunks if its size would exceed the server payload limit.\n   An empty message (0b) is written to notify the end of frame.\"\n  [write]\n  #(m/sp\n     (loop [xs (seq (pop %))]\n       (if-some [[x & xs] xs]\n         (do (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3c\" x)\n           (m/? (write\n                  (try (encode x)\n                    (catch #?(:clj Throwable :cljs :default) t\n                      (throw (ex-info \"Failed to encode\" {:value x} t))))))\n           (recur xs))\n         (loop [xs (peek %)]\n           (if (>= (count xs) chunk-size)\n             (do (m/? (write (encode-numbers (subvec xs 0 chunk-size))))\n               (recur (subvec xs chunk-size)))\n             (m/? (write (encode-numbers xs)))))))))\n\n(defn ^:deprecated decoder\n  \"A transducer partitioning a sequence of network messages into Electric events.\"\n  [rf]\n  (let [data (doto (object-array 2)\n               (aset 0 []) (aset 1 []))]\n    (fn\n      ([] (rf))\n      ([r]\n       (assert (= [] (aget data 0) (aget data 1)))\n       (rf r))\n      ([r x]\n       (if (string? x)\n         (do (assert (= [] (aget data 1)))\n             (aset data 0 (conj (aget data 0) (decode-str x))) r)\n         (let [xs (decode-numbers x)]\n           (aset data 1 (into (aget data 1) xs))\n           (if (< (count xs) chunk-size)                  ; final frame\n             (let [x (conj (aget data 0) (aget data 1))]\n               (aset data 0 [])\n               (aset data 1 [])\n               (rf r x)) r)))))))\n\n(defn ^:deprecated encoder\n  \"A transducer expanding Electric events to a sequence of network messages.\"\n  [rf]\n  (fn\n    ([] (rf))\n    ([r] (rf r))\n    ([r x]\n     (let [r (reduce rf r (eduction (map encode) (pop x)))\n           r (reduce rf r (eduction (partition-all chunk-size) (map encode-numbers) (peek x)))]\n       (case (mod (count (peek x)) chunk-size)\n         0 (rf r (encode-numbers [])) r)))))\n\n(defn foreach\n  ([r] r)\n  ([r x] (r x) r))\n"]}